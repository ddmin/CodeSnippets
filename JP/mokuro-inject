#!/usr/bin/env python
# inject javascript into mokuro html
# inspired by: https://github.com/kha-white/mokuro/issues/16#issuecomment-1690310509

import sys
import re

# Turn on debug messages
DEBUG=False

# Default Settings
BACKGROUND_COLOR = "232323"
READING_MODE = "keep zoom, go to top"

# BACKGROUND_INJECTION_SITE = "backgroundColor: '#C4C3D0',"
BACKGROUND_INJECTION_SITE = r"backgroundColor: '#[A-Fa-f0-9]{6}',"
INJECTION_BACKGROUND = f"backgroundColor: '#{BACKGROUND_COLOR}',"

READING_MODE_INJECTION_SITE = r"""defaultZoomMode: ['"][\w ]+['"],"""
INJECTION_READING_MODE = f"defaultZoomMode: '{READING_MODE}',"

EDITABLE_INJECTION_SITE = "editableText: false,"
INJECTION_EDITABLE = "editableText: true,"

# keyboard controls
SCROLL_SPEED = "3"

SHIFT_NOT = "&& !e.shiftKey"
MOVE_UP = f"e.keyCode===75 {SHIFT_NOT}"  # K
MOVE_DOWN = f"e.keyCode===74 {SHIFT_NOT}"  # J
MOVE_LEFT = f"e.keyCode===72 {SHIFT_NOT}"  # H
MOVE_RIGHT = f"e.keyCode===76 {SHIFT_NOT}"  # L

SHIFT_YES = "&& e.shiftKey"
#               EQUAL            (FIREFOX)         PLUS           UP_ARROW             K (SHIFT)
ZOOM_IN = f"e.keyCode===187||e.keyCode===61||e.keyCode===107||e.keyCode===38||e.keyCode===75 {SHIFT_YES}"
#               MINUS            (FIREFOX)         SUBTRACT       DOWN_ARROW           J (SHIFT)
ZOOM_OUT = f"e.keyCode===189||e.keyCode===173||e.keyCode===109||e.keyCode===40||e.keyCode===74 {SHIFT_YES}"

VIM_INJECTION_SITE = "function onKeyDown(e){var x=0,y=0,z=0;if(e.keyCode===38){y=1}else if(e.keyCode===40){y=-1}else if(e.keyCode===37){x=1}else if(e.keyCode===39){x=-1}else if(e.keyCode===189||e.keyCode===109){z=1}else if(e.keyCode===187||e.keyCode===107){z=-1}if(filterKey(e,x,y,z)){return}"

INJECTION_VIM = f"function onKeyDown(e){{var x=0,y=0,z=0;if({MOVE_UP}){{y={SCROLL_SPEED}}}else if({MOVE_DOWN}){{y=-{SCROLL_SPEED}}}else if({MOVE_LEFT}){{x={SCROLL_SPEED}}}else if({MOVE_RIGHT}){{x=-{SCROLL_SPEED}}}else if({ZOOM_OUT}){{z=1}}else if({ZOOM_IN}){{z=-1}}if(filterKey(e,x,y,z)){{return}}"

# Mostly from: https://github.com/kha-white/mokuro/issues/16#issuecomment-1690310509
# ORIGINAL AUTHOR: @phongtrantam
PANZOOM_INJECTION_SITE = "pz = panzoom(pc, {"
INJECTION_PANZOOM = """pz = panzoom(pc, {
        bounds: true,
        boundsPadding: 0.05,
        maxZoom: 10,
        minZoom: 0.1,
        zoomDoubleClickSpeed: 1,
        enableTextSelection: true,

        // add this option
        filterKey: function( e, dx, dy, dz ) {
            // don't let panzoom handle this event:
            return true;
        },"""

WHEEL_INJECTION_SITE = "beforeWheel: function (e) {"
INJECTION_WHEEL = """beforeWheel: function (e) {
            let shouldIgnore = disablePanzoomOnElement(e.target) || !e.ctrlKey;
            return shouldIgnore;
        },"""

# Mostly from: https://github.com/kha-white/mokuro/issues/4#issuecomment-1134164262
# ORIGINAL AUTHOR: @saxoncameron
SCROLL_INJECTION_SITE = "</script></body></html>"
INJECTION_SCROLL = """window.addEventListener('wheel', function (e) {
    const transforms = pz.getTransform();
    pz.moveTo(
        transforms.x - e.deltaX,
        transforms.y - e.deltaY,
    );
}, {
    passive: true
});
</script></body></html>"""


KEYBOARD_INJECTION_SITE = r"""document.addEventListener\(['"]keydown['"], function onEvent\(e\) {"""
INJECTION_KEYBOARD = """document.addEventListener("keydown", function onEvent(e) {
    switch (e.key) {
        // NORMIE KEYS ==========================================
        case "ArrowRight":
            prevPage();
            break;

        case "ArrowLeft":
            nextPage();
            break;

        case " ":
            nextPage();
            break;

        case "Backspace":
            prevPage();
            break;

        // VIM CHADS ============================================
        case "H":
            nextPage();
            break;

        case "L":
            prevPage();
            break;

        // ZATHURA KEYBINDINGS ===================================
        case "a":
            zoomFitToScreen();
            break;

        case "s":
            zoomFitToWidth();
            break;

        case "d":
            document.getElementById("menuDoublePageView").click();
            break;

        case "f":
            toggleFullScreen();
            break;

        case "g":
            panAlign('center', 'top')
            break;

        case "G":
            panAlign('center', 'bottom')
            break;

        // NOT REALLY USEFUL ====================================
        case "]":
            firstPage();
            break;

        case "[":
            lastPage();
            break;
    }
});"""


def inject(html, injection_site, injection, multiline=False, lines=1, regex=False):

    # target different mokuro versions with regex
    if regex:
        splits = re.split(injection_site, html)
    else:
        splits = html.split(injection_site)

    if len(splits) != 2:
        print(f"{name()}: ERROR '{sys.argv[1]}' is likely not a mokuro html file.")

        if DEBUG:
            print()
            print(f"|DEBUG| injection_site = {injection_site}")
            print(f"|DEBUG| len(splits) = {len(splits)}")

        exit(1)

    if multiline:
        html = splits[0] + injection + "\n" + "\n".join(splits[1].split("\n")[lines:])
    else:
        html = splits[0] + injection + splits[1]

    return html


def name():
    return sys.argv[0].split("/")[-1]


def help():
    print(f"Usage: {name()} [MOKURO HTML]")
    print("Injects javascript into mokuro html file.")


def main():
    if "-h" in sys.argv or "--help" in sys.argv:
        help()
        exit(0)

    if len(sys.argv) < 2:
        print(f"{name()}: ERROR Please provide a mokuro html file.")
        print()
        help()
        exit(1)

    html = ""
    try:
        with open(sys.argv[1], "r") as f:
            html = f.read()
    except:
        print(f"{name()}: ERROR Unable to open file '{sys.argv[1]}'.")
        exit(1)

    # ========================= default settings =============================
    # set default background color
    html = inject(
        html, BACKGROUND_INJECTION_SITE, INJECTION_BACKGROUND, multiline=False, regex=True
    )

    # set reading mode
    html = inject(
        html, READING_MODE_INJECTION_SITE, INJECTION_READING_MODE, multiline=False, regex=True
    )
    # ========================================================================

    # ===================== disable scroll wheel =================================
    html = inject(html, WHEEL_INJECTION_SITE, INJECTION_WHEEL, multiline=True, lines=4)
    # =============================================================================

    # ===================== pan with scroll wheel =================================
    html = inject(
        html, SCROLL_INJECTION_SITE, INJECTION_SCROLL, multiline=True, lines=1
    )
    # =============================================================================

    # ========================= keyboard shortcuts ===================================
    html = inject(
        html, KEYBOARD_INJECTION_SITE, INJECTION_KEYBOARD, multiline=True, lines=27, regex=True
    )
    # ================================================================================

    # ========================= vim navigation shortcuts =============================
    html = inject(html, VIM_INJECTION_SITE, INJECTION_VIM, multiline=False)
    # ================================================================================

    # ========================= disable panzoom =========================================
    # html = inject(html, PANZOOM_INJECTION_SITE, INJECTION_PANZOOM, multiline=True, lines=7)
    # ===================================================================================

    # ========================= set editable text by default =============================
    # html = inject(html, EDITABLE_INJECTION_SITE, INJECTION_EDITABLE, multiline=False)
    # ===================================================================================

    dir_split = sys.argv[1].split("/")
    if len(dir_split) < 2:
        save_name = f"injected-{dir_split[0]}"
    else:
        save_name = f'{"/".join(dir_split[:-1])}/injected-{dir_split[-1]}'

    with open(save_name, "w") as f:
        f.write(html)

    print(f"Saved to '{save_name}'")


if __name__ == "__main__":
    main()
